/* auto-generated by NAPI-RS */
/* eslint-disable */
export class Account {

  constructor()
  create(request: Buffer): Array<number>
  count(request: Buffer): Array<number>
  countAll(): Array<number>
  find(request: Buffer): Array<number>
  findAll(): Array<number>
  findById(request: Buffer): Array<number>
  findByShieldedAddress(request: Buffer): Array<number>
  findByPublicKey(request: Buffer): Array<number>
  updateById(request: Buffer): Array<number>
  updateByShieldedAddress(request: Buffer): Array<number>
  updateByPublicKey(request: Buffer): Array<number>
  updateEncryption(request: Buffer): Array<number>
  exportSecretKeyById(request: Buffer): Array<number>
  exportSecretKeyByShieldedAddress(request: Buffer): Array<number>
  exportSecretKeyByPublicKey(request: Buffer): Array<number>
}

export class Config {

  constructor()
  get(): Array<number>
  findDefaultCircuit(request: Buffer): Array<number>
  findCircuit(request: Buffer): Array<number>
  findChain(request: Buffer): Array<number>
  findPeerChains(request: Buffer): Array<number>
  findAssetSymbols(request: Buffer): Array<number>
  findBridge(request: Buffer): Array<number>
  findBridges(request: Buffer): Array<number>
  findDepositContract(request: Buffer): Array<number>
  findDepositContractByAddress(request: Buffer): Array<number>
  findPoolContract(request: Buffer): Array<number>
  findPoolContracts(request: Buffer): Array<number>
  findPoolContractByAddress(request: Buffer): Array<number>
  findContractByAddress(request: Buffer): Array<number>
  getTransactionUrl(request: Buffer): Array<number>
}

export class Deposit {

  constructor()
  quote(request: Buffer): Array<number>
  summary(request: Buffer): Array<number>
  create(request: Buffer): Array<number>
  send(request: Buffer): Array<number>
  sendWithGrpc(request: Buffer): Array<number>
  find(request: Buffer): Array<number>
  findAll(): Array<number>
  findOne(request: Buffer): Array<number>
  findById(request: Buffer): Array<number>
  count(request: Buffer): Array<number>
  countAll(): Array<number>
  update(request: Buffer): Array<number>
  updateBatch(request: Buffer): Array<number>
  updateByFilter(request: Buffer): Array<number>
  updateAll(request: Buffer): Array<number>
  delete(request: Buffer): Array<number>
  deleteBatch(request: Buffer): Array<number>
  deleteByFilter(request: Buffer): Array<number>
  deleteAll(): Array<number>
}

export class Mystiko {

  constructor()
  initialize(request: Buffer): Array<number>
  static isInitialized(): boolean
  static destroy(): void
}

export class Scanner {

  constructor()
  scan(request: Buffer): Array<number>
  reset(request: Buffer): Array<number>
  balance(request: Buffer): Array<number>
  assets(request: Buffer): Array<number>
  chainAssets(request: Buffer): Array<number>
}

export class Spend {

  constructor()
  quote(request: Buffer): Array<number>
  summary(request: Buffer): Array<number>
  create(request: Buffer): Array<number>
  send(request: Buffer): Array<number>
  sendWithGrpc(request: Buffer): Array<number>
  find(request: Buffer): Array<number>
  findAll(): Array<number>
  findOne(request: Buffer): Array<number>
  findById(request: Buffer): Array<number>
  count(request: Buffer): Array<number>
  countAll(): Array<number>
  update(request: Buffer): Array<number>
  updateByFilter(request: Buffer): Array<number>
  updateBatch(request: Buffer): Array<number>
  updateAll(request: Buffer): Array<number>
  delete(request: Buffer): Array<number>
  deleteBatch(request: Buffer): Array<number>
  deleteByFilter(request: Buffer): Array<number>
  deleteAll(): Array<number>
}

export class Synchronizer {

  constructor()
  chainSyncedBlock(request: Buffer): Array<number>
  contractSyncedBlock(request: Buffer): Array<number>
  status(request: Buffer): Array<number>
  sync(request: Buffer): Array<number>
  reset(request: Buffer): Array<number>
}

export class Wallet {

  constructor()
  create(request: Buffer): Array<number>
  checkCurrent(): Array<number>
  checkPassword(request: Buffer): Array<number>
  updatePassword(request: Buffer): Array<number>
  exportMnemonicPhrase(request: Buffer): Array<number>
}

