name: Build
env:
  DEBUG: napi:*
  APP_NAME: "mystiko-napi"
  WORK_PATH: "napi"
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_UNSTABLE_TARGET_APPLIES_TO_HOST: true
  CARGO_TARGET_APPLIES_TO_HOST: false
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
#          - host: macos-latest
#            target: x86_64-apple-darwin
#            build: |
#              yarn build
#              strip -x $APP_NAME.*.node
#          - host: macos-latest
#            target: aarch64-apple-darwin
#            build: |
#              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
#              export CC=$(xcrun -f clang);
#              export CXX=$(xcrun -f clang++);
#              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
#              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
#              yarn build --target aarch64-apple-darwin
#              strip -x $APP_NAME.*.node
#          - host: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
#            build: |
#              set -e &&
#          apt-get update
#          apt-get install -y ssh
#              cd $WORK_PATH &&
#              yarn build --target x86_64-unknown-linux-gnu &&
#              strip -x $APP_NAME.*.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              set -e
              apt-get update
              apt-get install -y ssh
              cd $WORK_PATH
              yarn build --target aarch64-unknown-linux-gnu
              aarch64-unknown-linux-gnu-strip $APP_NAME.*.node
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure npm for GitHub Packages
        run: |
          echo "@mystikonetwork:registry=https://npm.pkg.github.com" >> $HOME/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_TOKEN }}" >> $HOME/.npmrc
          cp $HOME/.npmrc $GITHUB_WORKSPACE/
      - name: SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_MYSTIKO_BACKEND }}
            ${{ secrets.SSH_PRIVATE_KEY_MYSTIKO_CIRCUITS }}
            ${{ secrets.SSH_PRIVATE_KEY_MYSTIKO_PROTOCOL }}
            ${{ secrets.SSH_PRIVATE_KEY_MYSTIKO_PROTOS }}
            ${{ secrets.SSH_PRIVATE_KEY_MYSTIKO_RUST }}
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.11.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
        working-directory: ${{ env.WORK_PATH }}
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          cache: yarn
          architecture: x86
      - name: Docker Collect Git and SSH config
        if: ${{ matrix.settings.docker }}
        run: |
          mkdir -p ${{ github.workspace }}/root-config
          cp -r ~/.gitconfig ~/.ssh ${{ github.workspace }}/root-config/
          chmod 600 ${{ github.workspace }}/root-config/.ssh/*
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: >
            --user 0:0
            -e APP_NAME=${{ env.APP_NAME }}
            -e WORK_PATH=${{ env.WORK_PATH }}
            -e SSH_AUTH_SOCK=${{ env.SSH_AUTH_SOCK }}
            -v ${{ github.workspace }}:/build
            -v ${{ github.workspace }}/.npmrc:/.npmrc
            -v ${{ github.workspace }}/root-config/.ssh:/home/runner/.ssh
            -v ${{ github.workspace }}/root-config/.gitconfig:/home/runner/.gitconfig
            -v ${{ env.SSH_AUTH_SOCK }}:${{ env.SSH_AUTH_SOCK }}
            -w /build
          run: |
            chown -R $(whoami):$(whoami) /home/runner
            chown -R $(whoami):$(whoami) /home/runner/.ssh
            chmod 600 /home/runner/.ssh/*
            ls -al home/runner/.ssh/
            ls -al /home/runner/
            ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
        working-directory: ${{ env.WORK_PATH }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.WORK_PATH }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
#  test-macOS-x64-binding:
#    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
#    needs:
#      - build
#    strategy:
#      fail-fast: false
#      matrix:
#        settings:
#          - host: macos-latest
#            target: x86_64-apple-darwin
#        node:
#          - '18'
#          - '20'
#    runs-on: ${{ matrix.settings.host }}
#    steps:
#      - uses: actions/checkout@v4
#      - name: Configure npm for GitHub Packages
#        run: |
#          echo "@mystikonetwork:registry=https://npm.pkg.github.com" >> $HOME/.npmrc
#          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_TOKEN }}" >> $HOME/.npmrc
#          cp $HOME/.npmrc $GITHUB_WORKSPACE/
#      - name: Setup node
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ matrix.node }}
#          cache: yarn
#      - name: Install dependencies
#        run: yarn install
#        working-directory: ${{ env.WORK_PATH }}
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: bindings-${{ matrix.settings.target }}
#          path: ${{ env.WORK_PATH }}
#      - name: List packages
#        run: ls -R .
#        shell: bash
#        working-directory: ${{ env.WORK_PATH }}
#      - name: Test bindings
#        run: yarn test
#        working-directory: ${{ env.WORK_PATH }}
#  test-macOS-aarch64-binding:
#    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
#    needs:
#      - build
#    strategy:
#      fail-fast: false
#      matrix:
#        settings:
#          - host: macos-latest
#            target: aarch64-apple-darwin
#        node:
#          - '18'
#          - '20'
#    runs-on: ${{ matrix.settings.host }}
#    steps:
#      - uses: actions/checkout@v4
#      - name: Configure npm for GitHub Packages
#        run: |
#          echo "@mystikonetwork:registry=https://npm.pkg.github.com" >> $HOME/.npmrc
#          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_TOKEN }}" >> $HOME/.npmrc
#          cp $HOME/.npmrc $GITHUB_WORKSPACE/
#      - name: Setup node
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ matrix.node }}
#          cache: yarn
#      - name: Install dependencies
#        run: yarn install
#        working-directory: ${{ env.WORK_PATH }}
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: bindings-${{ matrix.settings.target }}
#          path: ${{ env.WORK_PATH }}
#      - name: List packages
#        run: ls -R .
#        shell: bash
#        working-directory: ${{ env.WORK_PATH }}
#      - name: Test bindings
#        run: yarn test
#        working-directory: ${{ env.WORK_PATH }}
#  test-linux-x64-gnu-binding:
#    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
#    needs:
#      - build
#    strategy:
#      fail-fast: false
#      matrix:
#        node:
#          - '18'
#          - '20'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Configure npm for GitHub Packages
#        run: |
#          echo "@mystikonetwork:registry=https://npm.pkg.github.com" >> $HOME/.npmrc
#          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_TOKEN }}" >> $HOME/.npmrc
#          cp $HOME/.npmrc $GITHUB_WORKSPACE/
#      - name: Setup node
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ matrix.node }}
#          cache: yarn
#      - name: Install dependencies
#        run: yarn install
#        working-directory: ${{ env.WORK_PATH }}
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: bindings-x86_64-unknown-linux-gnu
#          path: ${{ env.WORK_PATH }}
#      - name: List packages
#        run: ls -R .
#        shell: bash
#        working-directory: ${{ env.WORK_PATH }}
#      - name: Test bindings
#        run: docker run --rm -v $(pwd)/${{ env.WORK_PATH }}:/build -w /build node:${{ matrix.node }}-slim yarn test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure npm for GitHub Packages
        run: |
          echo "@mystikonetwork:registry=https://npm.pkg.github.com" >> $HOME/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_TOKEN }}" >> $HOME/.npmrc
          cp $HOME/.npmrc $GITHUB_WORKSPACE/
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: ${{ env.WORK_PATH }}
      - name: List packages
        run: ls -R .
        shell: bash
        working-directory: ${{ env.WORK_PATH }}
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install
        working-directory: ${{ env.WORK_PATH }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        working-directory: ${{ env.WORK_PATH }}
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: '--platform linux/arm64 -v ${{ github.workspace }}/${{ env.WORK_PATH }}:/build -w /build'
          run: |
            set -e
            yarn test
            ls -la
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
#      - test-macOS-x64-binding
#      - test-macOS-aarch64-binding
#      - test-linux-x64-gnu-binding
      - test-linux-aarch64-gnu-binding
    steps:
      - uses: actions/checkout@v4
      - name: Configure npm for GitHub Packages
        run: |
          echo "@mystikonetwork:registry=https://npm.pkg.github.com" >> $HOME/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_TOKEN }}" >> $HOME/.npmrc
          cp $HOME/.npmrc $GITHUB_WORKSPACE/
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn
      - name: Install dependencies
        run: yarn install
        working-directory: ${{ env.WORK_PATH }}
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.WORK_PATH }}/artifacts
      - name: Move artifacts
        run: yarn artifacts
        working-directory: ${{ env.WORK_PATH }}
      - name: List packages
        run: ls -R ./npm
        shell: bash
        working-directory: ${{ env.WORK_PATH }}
      - name: Publish
        run: |
          if git log -1 --pretty=%B | grep -q "^[0-9]+\.[0-9]+\.[0-9]+$"; then
            npm publish --access public
          elif git log -1 --pretty=%B | grep -q "^[0-9]+\.[0-9]+\.[0-9]+"; then
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        working-directory: ${{ env.WORK_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
